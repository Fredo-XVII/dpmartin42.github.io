model <- coxph(s ~ sex + treatment + age + year + deprivation + num_drugs + smoking_status,
data = colon)
model <- coxph(s ~ sex + age,
data = colon)
summary(model)
null_model <- coxph(s ~ 1,
data = colon)
summary(null_model)
plot(survfit(null_model),
#xscale = 365.25,
xlab = "Years after diagnosis",
ylab = "Proportion survived",
main = "Baseline Hazard Curve")
head(colon)
?colon
plot(survfit(null_model),
#xscale = 365.25,
xlab = "Days after censoring",
ylab = "Proportion survived",
main = "Baseline Hazard Curve")
plot(survfit(null_model),
xscale = 365.25,
xlab = "Days after censoring",
ylab = "Proportion survived",
main = "Baseline Hazard Curve")
install.packages("rvest")
library(rvest)
rm(list = ls())
library(survival)
?colon
head(colon)
dim(colon)
s <- Surv(colon$time, colon$status)
null_model <- coxph(s ~ 1,
data = colon)
summary(null_model)
plot(survfit(null_model),
xscale = 365.25,
xlab = "Days after censoring",
ylab = "Proportion survived",
main = "Baseline Hazard Curve")
plot(survfit(null_model),
xscale = 365.25,
xlab = "Years after censoring",
ylab = "Proportion survived",
main = "Baseline Hazard Curve")
w_mod <- survreg(s ~ 1,
data = colon,
dist = "weibull")
summary(w_mod)
plot(survfit(w_mod))
colon[1,]
predict(w_mod, colon[1, ], type = "quantile")
lfit <- survreg(Surv(time, status) ~ ph.ecog, data=lung)
pct <- 1:98/100   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(lfit, newdata=data.frame(ph.ecog=2), type='quantile',
p=pct, se=TRUE)
ptime
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit)/30.5, 1-pct,
xlab="Months", ylab="Survival", type='l', lty=c(1,2,2), col=1)
1:98/100
predict(w_mod, colon[1, ], type = "quantile", p = 1:98/100)
predict(w_mod, colon[1, ], type = "quantile", p = 1:98/100)/365.25
predict(w_mod, colon[1, ], type = "quantile", p = 1:98/100)
predict(w_mod, colon[1, ], type = "quantile", p = 1:98/100)
predict(w_mod, colon[2, ], type = "quantile", p = 1:98/100)
predict(w_mod, colon[5, ], type = "quantile", p = 1:98/100)
predict(w_mod, colon[1:2, ], type = "quantile", p = 1:98/100)
predict(w_mod, colon[1, ], type = "quantile", p = 1:98/100)
pct <- 1:98/100
p_time <- predict(w_mod, colon[1, ], type = "quantile", p = 1:98/100)
plot(p_time, 1 - pct)
plot(p_time, 1 - pct), type = 'l'
summary(colon$time)
colon[1, ]
?predict.survreg
?predict.coxph
w_pred <- predict(w_mod, newdata = colon, type = "response", se = TRUE)
head(w_pred)
head(w_pred$fit)
w_pred <- predict(w_mod, newdata = colon[1, ], type = "response", se = TRUE)
w_pred
summary(colon$time)
pct <- 1:98/100   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(w_mod, newdata = colon[1, ], type='quantile',
p=pct, se=TRUE)
ptime
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit)/30.5, 1-pct,
xlab="Months", ylab="Survival", type='l', lty=c(1,2,2), col=1)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit)/365.25, 1-pct,
xlab="Months", ylab="Survival", type='l', lty=c(1,2,2), col=1)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit)/365.25, 1-pct,
xlab="Years", ylab="Survival", type='l', lty=c(1,2,2), col=1)
km_fit <- survfit(s ~ 1, data = colon)
plot(km_fit)
plot(w_mod)
w_mod <- survreg(s ~ 1,
data = colon,
dist = "weibull")
w_pred <- predict(w_mod, newdata = colon[1, ], type = "response", se = TRUE)
w_pred # predicting 3533 days
head(veteran)
summary(veteran$time)
km_fit <- survfit(Surv(veteran$time, veteran$status))
km_fit <- survfit(Surv(veteran$time, veteran$status) ~ 1, data = veteran)
plot(km_fit)
w_mod <- survreg(s ~ 1,
data = veteran,
dist = "weibull")
w_pred <- predict(w_mod, newdata = veteran[1, ], type = "response", se = TRUE)
w_pred # predicting 3533 days, makes sense given the large percentage that survive the full time
plot(km_fit)
w_mod <- survreg(Surv(veteran$time, veteran$status) ~ 1,
data = veteran,
dist = "weibull")
w_pred <- predict(w_mod, newdata = veteran[1, ], type = "response", se = TRUE)
w_pred # predicting 3533 days, makes sense given the large percentage that survive the full time
pct <- 1:98/100   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(w_mod, newdata = colon[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit)/365.25, 1-pct,
xlab="Years", ylab="Survival", type='l', lty=c(1,2,2), col=1)
pct <- 1:98/100   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(w_mod, newdata = colon[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit), 1-pct,
xlab="Years", ylab="Survival", type='l', lty=c(1,2,2), col=1)
pct <- 1:98/100   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(w_mod, newdata = colon[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit), 1-pct,
xlab="Days", ylab="Survival", type='l', lty=c(1,2,2), col=1)
plot(km_fit)
pct <- 1:50/100   # The 100th percentile of predicted survival is at +infinity
pct
ptime <- predict(w_mod, newdata = colon[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit), 1-pct,
xlab="Days", ylab="Survival", type='l', lty=c(1,2,2), col=1)
km_fit <- survfit(s ~ 1, data = colon)
plot(km_fit)
w_mod <- survreg(s ~ 1,
data = colon,
dist = "weibull")
w_pred <- predict(w_mod, newdata = colon[1, ], type = "response", se = TRUE)
w_pred # predicting 3533 days, makes sense given the large percentage that survive the full time
pct <- 1:50/100   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(w_mod, newdata = colon[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit), 1-pct,
xlab="Days", ylab="Survival", type='l', lty=c(1,2,2), col=1)
km_fit <- survfit(Surv(time, status) ~ 1, data = veteran)
plot(km_fit)
w_mod <- survreg(s ~ 1,
data = veteran,
dist = "weibull")
w_pred <- predict(w_mod, newdata = veteran[1, ], type = "response", se = TRUE)
w_pred # predicting 3533 days, makes sense given the large percentage that survive the full time
w_mod <- survreg(Surv(time, status) ~ 1,
data = veteran,
dist = "weibull")
w_pred <- predict(w_mod, newdata = veteran[1, ], type = "response", se = TRUE)
w_pred # predicting 3533 days, makes sense given the large percentage that survive the full time
ptime <- predict(w_mod, newdata = veteran[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit)/365.25, 1-pct,
xlab="Years", ylab="Survival", type='l', lty=c(1,2,2), col=1)
pct <- 1:98/100   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(w_mod, newdata = veteran[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit), 1-pct,
xlab="Days", ylab="Survival", type='l', lty=c(1,2,2), col=1)
ptime
pct <- 1:980/1000   # The 100th percentile of predicted survival is at +infinity
pct
pct <- 1:980/1000   # The 100th percentile of predicted survival is at +infinity
ptime <- predict(w_mod, newdata = veteran[1, ], type='quantile',
p=pct, se=TRUE)
matplot(cbind(ptime$fit, ptime$fit + 2*ptime$se.fit,
ptime$fit - 2*ptime$se.fit), 1-pct,
xlab="Days", ylab="Survival", type='l', lty=c(1,2,2), col=1)
km_fit$time
km$surv
km_fit$surv
stepfun(km_fit$time, c(1, km_fit$surv))
plot(km_fit)
survest <- stepfun(km_fit$time, c(1, km_fit$surv))
plot(survest)
survest
summary(survest)
survest(1)
survest(5)
survest(7)
survest(8)
survest(9)
survest(19)
model <- coxph(s ~ sex + age,
data = colon)
summary(model)
null_model
foo <- summary(null_model)
foo$loglik
foo
null_model
summary(null_model)
plot(null_model)
w_pred
w_mod
summary(w_mod)
rm(list = ls())
library(survival)
head(veteran)
summary(veteran$time)
km_fit <- survfit(Surv(time, status) ~ 1, data = veteran)
survest <- stepfun(km_fit$time, c(1, km_fit$surv))
plot(survest)
survest(600)
survest(200)
plot(km_fit)
survest(200) # get survival probability at any time, need to extend to a model so it can take covariates
cox_mod <- coxph(Surv(time, status) ~ 1, data = veteran)
cox_mod
km_fit$time
survfit(null_model)
survfit(cox_mod)
cox_mod_fit <- survfit(cox_mod)
summary(cox_mod_fit)
cox_mod_fit$time
cox_mod_fit$surv
survest_vet <- stepfun(c(0, cox_mod_fit$time), c(1, cox_mod_fit$surv))
c(0, cox_mod_fit$time)
length(cox_mod_fit$time)
length(cox_mod_fit$surv)
survest_vet <- stepfun(cox_mod_fit$time, c(1, cox_mod_fit$surv))
survest_vet
plot(cox_mod_fit)
plot(cox_mod_fit)
survest_vet(400)
survest(400) # get survival probability at any time, need to extend to a model so it can take covariates
cox_mod_fit$time
cox_mod_fit$time[101]
survest_vet(100:101)
survest_vet(t_surv:t_last)
t_surv <- 200
t_last <- cox_mod_fit$time[101]
survest_vet(t_surv:t_last)
survest_vet(t_surv:t_last) %>%
rescale()
library(dplyr)
library(scales)
survest_vet(t_surv:t_last) %>%
rescale()
plot(t_surv:t_last, survest_vet(t_surv:t_last))
plot(t_surv:t_last, survest_vet(t_surv:t_last), type = 'l')
plot(t_surv:t_last, rescale(survest_vet(t_surv:t_last)), type = 'l')
survest_vet(t_surv:t_last) %>%
rescale() %>%
filter(row_number() <= 100)
survest_vet(t_surv:t_last) %>%
rescale()
rescale(survest_vet(t_surv:t_last))[1:100]
plot(cox_mod_fit)
t_surv <- 10
t_last <- cox_mod_fit$time[101]
rescale(survest_vet(t_surv:t_last))[1:100]
survest_vet(t_surv:t_last)
t_surv <- 10
t_last <- cox_mod_fit$time[101]
rescale(survest_vet(t_surv:t_last))[1:100]
plot(t_surv:t_surv+100, rescale(survest_vet(t_surv:t_last))[1:100])
t_surv:t_surv+100
plot(t_surv:(t_surv+100), rescale(survest_vet(t_surv:t_last))[1:100])
t_surv:(t_surv+100)
length(t_surv:(t_surv+100))
plot(t_surv:(t_surv+99), rescale(survest_vet(t_surv:t_last))[1:100])
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)))
t_surv <- 200
t_last <- cox_mod_fit$time[101]
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)))
plot(cox_mod_fit)
t_surv <- 400
t_last <- cox_mod_fit$time[101]
rescale(survest_vet(t_surv:t_last))
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)))
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
t_surv <- 100
t_last <- cox_mod_fit$time[101]
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
t_surv <- 600
t_last <- cox_mod_fit$time[101]
rescale(survest_vet(t_surv:t_last))
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
t_surv <- 500
t_last <- cox_mod_fit$time[101]
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
t_surv <- 400
t_last <- cox_mod_fit$time[101]
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
t_surv <- 100
t_last <- cox_mod_fit$time[101]
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
foo_data <- data.frame(ID = c(1, 2, 3),
t_surv = c(10, 100, 500))
foo_data
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
sapply(x, quantile)
calc_surv_prob <- function(t_surv, t_last, surv_function){
return(rescale(survest_vet(t_surv:t_last)))
}
calc_surv_prob(foo_data$t_surv[1], t_last, survest_vet)
sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet)
calc_surv_prob(foo_data$t_surv[1], t_last, survest_vet)
head(calc_surv_prob(foo_data$t_surv[1], t_last, survest_vet))
head(sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet)[[1]])
identical(calc_surv_prob(foo_data$t_surv[1], t_last, survest_vet),
sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet)[[1]])
sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet) %>%
do.call(cbind)
sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet) %>%
do.call() %>%
cbind()
do.call(sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet), cbind)
do.call(cbind, sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet))
do.call(rbind, sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet))
cox_mod_fit$time[101]
t_surv <- 100
t_last <- cox_mod_fit$time[101] + 100
rescale(survest_vet(t_surv:t_last))
rescale(survest_vet(t_surv:t_last))
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
t_surv <- 1000
rescale(survest_vet(t_surv:t_last))
plot(t_surv:(t_last), rescale(survest_vet(t_surv:t_last)), type = 'l')
foo_data <- data.frame(ID = c(1, 2, 3),
t_surv = c(10, 100, 500))
calc_surv_prob <- function(t_surv, t_last, surv_function, the_length){
return(rescale(survest_vet(t_surv:t_last))[1:the_length])
}
foo_res <- sapply(foo_data$t_surv, t_last, survest_vet, 100)
foo_res <- sapply(foo_data$t_surv, calc_surv_prob, t_last, survest_vet, 100)
foo_res
total_data <- cbind(foo_data, t(foo_res))
head(total_data)
sum(c(4172, 3110, 5568, 6027, 1074))
library(IAT)
?cleanIAT
install.packages("lavaan", repos="http://www.da.ugent.be", type="source")
install.packages("simsem")
library(simsem)
popModel <- "
f1 =~ 1*y1 + 0.6*y2 + 0.7*y3
f2 =~ 1*y4 + 1.1*y5 + 0.9*y6
f3 =~ 1*y7 + 1.2*y8 + 1.1*y9
f1 ~~ 0.8*f1
f2 ~~ 0.9*f2
f3 ~~ 0.4*f3
f1 ~~ 0.4*f2
f1 ~~ 0.2*f3
f2 ~~ 0.3*f3
y1 ~~ 0.5*y1
y2 ~~ 1.1*y2
y3 ~~ 0.8*y3
y4 ~~ 0.4*y4
y5 ~~ 0.4*y5
y6 ~~ 0.8*y6
y7 ~~ 0.8*y7
y8 ~~ 0.5*y8
y9 ~~ 0.6*y9
"
analyzeModel <- "
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
"
Output <- sim(1000, analyzeModel, n=200, generate=popModel, lavaanfun = "cfa")
library(devtools)
install_url("https://github.com/simsem/simsem/blob/master/builds/simsem_0.5-14.1.tar.gz")
install_url("https://github.com/simsem/simsem/blob/master/builds/simsem_0.5-14.1.zip")
install_url("https://github.com/simsem/simsem/blob/master/builds/simsem_0.5-14.tar.gz")
c(rep(4/4), 31)
c(rep(4/4, 31))
scores <-
c(rep(4/4, 31),
rep(9/10, 25),
rep(5/5, 23),
rep(4/5, 18),
rep(3.5/4, 11),
rep(4.5/5, 9),
rep(8/10, 8))
scores
mean(scores)
median(scores)
plot(density(scores))
scores <-
c(rep(4/4, 31),
rep(9/10, 25),
rep(5/5, 23),
rep(4/5, 18),
rep(3.5/4, 11),
rep(4.5/5, 9),
rep(8/10, 8),
rep(3/4, 5),
rep(10/10, 5),
rep(3.5/5, 4),
rep(3/5, 3),
rep(2.5/4, 3),
rep(8.5/10, 1),
rep(7/10, 1),
rep(8.124/10, 1),
rep(2/5, 1),
rep(9/10, 1),
rep(1/5, 1),
rep(9.3/10, 1))
scores
mean(scores)
median(scores)
plot(density(scores))
score <-
c(rep(6/10, 2),
rep(5/10, 2),
rep(3/5, 1),
rep(0/4, 1),
rep(1/4, 1),
rep(1/5, 1))
score
mean(score)
score <-
c(rep(6/10, 2),
rep(5/10, 1),
rep(3/5, 1),
rep(0/4, 1),
rep(1/4, 1),
rep(1/5, 1))
mean(score)
library(IAT)
foo=cleanIAT(IATData)
?cleanIAT
cong_first <- IATData[IATData$isCongruentFirst == 1, ]
dscore_first <- cleanIAT(my_data = cong_first,
block_name = "BLOCK_NAME_S",
trial_blocks = c("BLOCK2", "BLOCK3", "BLOCK5", "BLOCK6"),
session_id = "SESSION_ID",
trial_latency = "TRIAL_LATENCY",
trial_error = "TRIAL_ERROR",
v_error = 1, v_extreme = 2, v_std = 1)
dscore_first
names(dscore_first)
library(ISLR)
library(randomForest)
library(dplyr)
set.seed(42)
data(College)
rf <- randomForest(Grad.Rate ~ ., data = College)
var1_vals <- seq(from = min(College$Outstate),
to = max(College$Outstate),
by = (max(College$Outstate) -
min(College$Outstate))/19)
var2_vals <- seq(from = min(College$perc.alumni),
to = max(College$perc.alumni),
by = (max(College$perc.alumni) -
min(College$perc.alumni))/19)
two_vals <- expand.grid(var1_vals, var2_vals)
two_vals <- arrange(two_vals, Var1, Var2)
two_rep <- College[rep(1:nrow(College), nrow(two_vals)), ]
two_rep
?pam.fit
library(cluster)
?pam.object
head(iris)
RStudio.Version()
install.packages("randomForest")
install.packages("breakdown")
install.packages("breakDown")
install.packages("archivist")
archivist::aread("pbiecek/DALEX/arepo/a79f3c7e")
devtools::install_github("pbiecek/DALEX")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("pbiecek/DALEX")
library(randomForest)
library(breakDown)
library(DALEX)
HR_rf_model <- randomForest(left ~ ., data = HR_data,
ntree = 500)
HR_rf_model
?HR_data
system.time(
explainer_rf <- explain(HR_rf_model, data = HR_data)
)
explainer_rf
system.time(expl_rf <- single_variable(explainer_rf,
variable = "satisfaction_level",
type = "pdp")
)
plot(expl_rf)
RStudio.Version()
setwd("~/../danmartin/Documents/Website/dpmartin42.github.io/projects/Harry_Potter/data")
library(jsonlite)
foo <- fromJSON("HP_network_clean.json")
foo
